@startuml
actor ZWC_mdw_verzender #lightblue
participant ECD_verzender #lightblue
participant ESB_verzender #lightblue
participant POINT_verzender #lightblue
participant Nuts_node_verzender #lightblue

participant Nuts_node_ontvanger #lightpink
participant POINT_ontvanger #lightpink
participant ESB_ontvanger #lightpink
participant ECD_ontvanger #lightpink
actor ZWC_mdw_ontvanger #lightpink

autonumber

ZWC_mdw_verzender -> ECD_verzender: login
ECD_verzender -> ECD_verzender: Create zibs/fhir-resources
group 1 Start eOverdracht
  ECD_verzender -> ECD_verzender: Request start eOverdracht
  ECD_verzender -> ECD_verzender: present available zibs
  ECD_verzender -> ECD_verzender: user checks zibs
  alt zibs not complete
    ECD_verzender -> ECD_verzender: fix manually or overrule
  end
  
  ECD_verzender -> ECD_verzender: create Task \n<<client id, case id, receivingorg id>>
  
  opt create case by notification
    ECD_verzender -> ESB_verzender: Notification \n<<client id, case id>>
    ESB_verzender -> POINT_verzender: Forward Notification \n<<client id, case id>>
    POINT_verzender -> POINT_verzender: Create unstarted case \n(werkbriefje)
  end
  ECD_verzender -> POINT_verzender: SSO <<client id, case id>> (user authn by ecd)
  POINT_verzender -> POINT_verzender: create case (if necessary)
  POINT_verzender -> POINT_verzender: start case
  POINT_verzender --> ESB_verzender: PUT Task-resource \nwith updated status\n'started internally'
  ESB_verzender --> ECD_verzender: forward PUT of Task-resource
  ECD_verzender --> ECD_verzender: update Task
end group

group 2 Controleren zibs, selecteren ZA, verzenden anonieme zibs
  ECD_verzender -> POINT_verzender: SSO <<client id, case id>> (user authn by ecd)
  POINT_verzender -> ESB_verzender: GET FHIR resources\n<<client id>>
  ESB_verzender -> ECD_verzender: forward GET
  ECD_verzender -> ESB_verzender: FHIR resources
  ESB_verzender -> ESB_verzender: apply business logic
  ESB_verzender -> POINT_verzender: FHIR resources
  POINT_verzender -> POINT_verzender: display narratives of zibs
  POINT_verzender -> POINT_verzender: user checks commpleteness
  alt zibs not complete
    POINT_verzender --> ESB_verzender: PUT Task-resource \nwith updated status 'incomplete'
    ESB_verzender --> ECD_verzender: forward PUT of Task-resource
    ECD_verzender --> ECD_verzender: update Task
    POINT_verzender -> POINT_verzender: fix manually\n and restart phase\n "Controleren en selecteren ZA"
  end
  alt gewenste situatie
    POINT_verzender -> Nuts_node_verzender: zoeken adresboek
    POINT_verzender <- Nuts_node_verzender: Adres    
  else nuts standard is not complete for 'aanmelding'
    POINT_verzender -> POINT_verzender: get adress
  end
  
  POINT_verzender -> POINT_ontvanger: send Vpk Aanmelding

  POINT_verzender --> ESB_verzender: PUT Task-resource \nwith updated status 'requested'
  ESB_verzender --> ECD_verzender: forward PUT of Task-resource
  ECD_verzender --> ECD_verzender: update Task
  
end group
@enduml
